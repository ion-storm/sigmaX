siems:
  splunk:
    name: "Splunk SPL & tstats data model queries"
    index_map:
      process_creation: "index=windows_events"
      firewall: "index=firewall"
      default: "index=main"
    operators:
      contains: "{field}=\"*{value}*\""  # Quoted value with wildcards
      not_contains: "{field}!=\"*{value}*\""  # Quoted value with wildcards
      startswith: "{field}=\"{value}*\""  # Quoted value with trailing wildcard
      endswith: "{field}=\"*{value}\""  # Quoted value with leading wildcard
      lt: "{field}<{value}"  # Less than (numeric comparison)
      lte: "{field}<={value}"  # Less than or equal (numeric comparison)
      gt: "{field}>{value}"  # Greater than (numeric comparison)
      gte: "{field}>={value}"  # Greater than or equal (numeric comparison)
      re: "match({field}, \"{value}\")"  # Unquoted value (regex pattern)
      equals: "{field}=\"{value}\""  # Quoted value
      not_equals: "{field}!=\"{value}\""  # Quoted value
      exists: "{field}=*"  # No quotes needed, checks existence
    group_conditions:
      all_of: "({conditions})"
      any_of: "({conditions})"
      not: "NOT ({conditions})"
    time_filter:
      keyword: "earliest="
      format:
        last_24_hours: "-24h"
        last_7_days: "-7d"
        last_30_days: "-30d"
        default: "-24h"
    query_template: "{index} {conditions} {time_filter}"
    value_format: "always_quote"
    escape_chars:
      "\\": "\\\\"
      "/": "\\/"
      '"': "\\\""

  crowdstrike:
    name: "CrowdStrike LogScale Query Language"
    include_time_filter: false
    cidr_supports_array: true
    index_map:
      process_creation: "#repo=Falcon #event_simpleName=ProcessRollup2"
      firewall: "#repo=Falcon #event_simpleName=NetworkConnectIP4"
      default: "logs"
    operators:
      contains: "{field}=/{value}/i"
      not_contains: "{field}!=/{value}/i"
      base64offset: "{field}=/{value}/i"
      startswith: "{field}=/^{value}/i"
      endswith: "{field}=/{value}$/i"
      lt: "{field}<\"{value}\""  # Less than (numeric or string comparison)
      lte: "{field}<=\"{value}\""  # Less than or equal
      gt: "{field}>\"{value}\""  # Greater than
      gte: "{field}>=\"{value}\""  # Greater than or equal
      re: "{field}=/{value}/{flags}"
      equals: "{field}=\"{value}\""
      not_equals: "{field}!=\"{value}\""
      exists: "{field}=*"
      cidr: "cidr({field}, subnet={value})"
    group_conditions:
      all_of: "({conditions})"
      any_of: "({conditions})"
      not: "NOT ({conditions})"
    time_filter:
      keyword: "@timestamp>="
      format:
        last_24_hours: "now()-24h"
        last_7_days: "now-7d"
        last_30_days: "now-30d"
        default: "now()-24h"
    query_template: "{index} {conditions} {time_filter} | mitre_attack:=\"{tags}\""
    value_format: "default"
    windash_strategy: "regex"
    escape_chars:
      "\\": "\\\\"
      "/": "\\/"
      '"': "\\\""
      ' ': "\\s"
      '.': "\\."
    field_mappings:
      CommandLine: "CommandLine"
      Image: "Image"
      ParentImage: "ParentImage"
      OriginalFileName: "OriginalFileName"
      IntegrityLevel: "IntegrityLevel"

  elasticsearch:
    name: "Kibana Query Language"
    index_map:
      process_creation: "index=winlogbeat-*"
      firewall: "index=packetbeat-*"
      default: "index=logs-*"
    operators:
      contains: "{field}:*{value}*"
      startswith: "{field}:{value}*"
      endswith: "{field}:*{value}"
      re: "{field}:/{value}/"
      equals: "{field}:\"{value}\""
      exists: "{field}:*"
    group_conditions:
      all_of: "({conditions})"
      any_of: "({conditions})"
      not: "NOT ({conditions})"
    time_filter:
      keyword: "@timestamp>="
      format:
        last_24_hours: "now-24h"
        last_7_days: "now-7d"
        last_30_days: "now-30d"
        default: "now-24h"
    query_template: "{index} {conditions} {time_filter}"
    value_format: "default"
    escape_chars:
      "\\": "\\\\"
      "/": "\\/"
      '"': "\\\""

  trino:
    name: "Trino SQL Query Engine"
    include_time_filter: false
    index_map:
      process_creation: "events.process_creation_table"
      firewall: "events.firewall_table"
      default: "events.default_table"
    operators:
      equals: "{field} = '{value}'"
      contains: "REGEXP_LIKE({field}, '(?i){value}'"
      startswith: "{field} LIKE '{value}%'"
      endswith: "{field} LIKE '%{value}'"
      re: "REGEXP_LIKE({field}, '{value}')"
      exists: "{field} IS NOT NULL"
      base64: "{field} = '{value}'"
      base64offset: "{field} = '{value}'"
      windash: "{windash_template}"  # New operator for windash
    group_conditions:
      all_of: "({conditions})"
      any_of: "({conditions})"
      not: "NOT ({conditions})"
    time_filter:
      keyword: "{time_field} >= "
      format:
        last_24_hours: "CURRENT_TIMESTAMP - INTERVAL '24' HOUR"
        last_7_days: "CURRENT_TIMESTAMP - INTERVAL '7' DAY"
        last_30_days: "CURRENT_TIMESTAMP - INTERVAL '30' DAY"
        default: "CURRENT_TIMESTAMP - INTERVAL '24' HOUR"
    query_template: |
      SELECT *
      FROM {index}
      WHERE {conditions};
    default_time_field: "timestamp"
    default_columns: "*"
    value_format: "default"
    #windash_strategy: "regex"  # Can be changed to "like"
    windash_templates:  # New section for windash strategies
      regex: "REGEXP_LIKE({field}, '{value}')"
      like: "({conditions})"
    escape_chars:
      "\\": "\\\\"
      "'": "''"
      "%": "\\%"
      "_": "\\_"
      ' ': "\\s"
    field_mappings:
      CommandLine: "cmdline"
      Image: "image"
      ParentImage: "parent_image"
      OriginalFileName: "orig_file"
      Details: "details"
      IntegrityLevel: "integrity_level"
